{"meta":{"title":"Gxzblog","subtitle":"python advance","description":"Life is short, I enjoy python.","author":"Gxzblog","url":"https://github.com/Gyz-polymer/Gyz-polymer.github.io","root":"/Gyz-polymer.github.io/"},"pages":[],"posts":[{"title":"判断异序字符串","slug":"判断异序字符串","date":"2020-07-29T04:00:31.367Z","updated":"2020-07-29T04:06:05.343Z","comments":true,"path":"2020/07/29/判断异序字符串/","link":"","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/2020/07/29/%E5%88%A4%E6%96%AD%E5%BC%82%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"需求判断两个单词是不是异序词，判断时忽略大小写，例如earth和heart就是异序词。以如下两个随便写的字符串为例，进行判断：12a = 'adceWq'b = 'aCedqw' 1.利用内置函数sorted：先判断长度，字母都变成小写，进行排序判断 – O(n^2^)123456def sort_word(a,b): if len(a) == len(b) and sorted(a.lower()) == sorted(b.lower()): return '&#123;&#125; and &#123;&#125; is the words with different order.'.format(a,b) else: return 'No...'print(sort_word(a,b)) 2.清点法：将a的每一个字母添加到一个列表,如果b某一个字母不在a里面那就是不同字母 –O(n^2^)12345678def justify(a,b): if len(a) == len(b): for i in b.lower(): if i not in list(a.lower()): return 'No...' else: return '&#123;&#125; and &#123;&#125; is the words with different order.'.format(a,b)print(justify(a,b)) 3.蛮力法：将a生成所有的可能的字符串列表，看b是不是在里面—特别慢 O(n!)123456c = [[b1,b2,b3,b4,b5,b6] for b1 in a.lower() for b2 in a.lower().replace(b1,'') for b3 in a.lower().replace(b1,'').replace(b2,'') for b4 in a.lower().replace(b1,'').replace(b2,'').replace(b3,'') for b5 in a.lower().replace(b1,'').replace(b2,'').replace(b3,'').replace(b4,'') for b6 in a.lower().replace(b1,'').replace(b2,'').replace(b3,'').replace(b4,'').replace(b5,'')]# print(c)if list(b.lower()) in c: print('&#123;&#125; and &#123;&#125; is the words with different order.'.format(a,b)) 本来要将上面的方法简化一下，写成函数，函数恐怕也只能迭代了，迭代的速度也很低，没找到好方法，欢迎大家提供，这个方法其实是把问题变成了另一个问题：一个length为n的字符串随机排列的可能性，第一个字母有n中可能，第二个字母有n-1种可能性，所以一共就是1到n的累加种可能性：n*(n+1)/24.计数法：自己写一个或者利用collections的Counter模块123456789101112131415161718192021def count(a,b): # 先建立两个含有26个0的列表用来计数每个字母出现了几次 l1 = [0] * 26 l2 = [0] * 26 for i in range(len(a)-1): # a 对应数字97，以a为基准 pos = ord(a.lower()[i]) - ord('a') l1[pos] += 1 for i in range(len(b)-1): pos = ord(b.lower()[i]) - ord('a') l2[pos] += 1 # 判断生成的两个列表是否一样 for i in range(27): if l1[i] != l2[i]: return 'No...' else: return '&#123;&#125; and &#123;&#125; is the words with different order.'.format(a, b)from collections import Counterif Counter(a.lower()) == Counter(b.lower()): print('&#123;&#125; and &#123;&#125; is the words with different order.'.format(a,b))print(count(a,b))","categories":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/python/"},{"name":"办公自动化","slug":"办公自动化","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/"}]},{"title":"glob文件操作","slug":"glob模块","date":"2020-07-28T08:02:57.792Z","updated":"2020-07-28T08:04:42.130Z","comments":true,"path":"2020/07/28/glob模块/","link":"","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/2020/07/28/glob%E6%A8%A1%E5%9D%97/","excerpt":"","text":"glob模块:查找文件和目录可使用的通配符： *匹配0或多个字符 ** 匹配所有文件,目录，子目录和子目录里面的文件 ？ 匹配一个字符,这里与正则表达式? (正则?匹配前面表达式0次或者1次) [] 匹配指定范围内的字符,如: [1-9]匹配1至9内的字符 [!] 匹配不在指定范围内的字符 查找当前路径下所有py文件：12for fname in glob.glob(\"**/*.py\",recursive=True): # recursive=True也查找子文件夹中的文件 print(fname) 当前路径文件tmp下py文件:12for fname in glob.glob(\"./tmp/*.py\"): print(fname) 当前路径文件下以file开头后有一个字符的py文件:12for fname in glob.glob(\"./file?.py\"): print(fname) 当前路径文件下以file开头后一个数字符的py文件:12for fname in glob.glob(\"./file[0-9].py\"): print(fname) 当前路径文件下以file开头后一个非数字符的py文件:12for fname in glob.glob(\"./file[!0-9].py\"): print(fname) 查询子目录：12for name in glob.glob('dir/*/*'): print ('\\t', name) glob模块iglob 返回iterator执行效率更高:当前路径文件tmp下py文件:12for fname in glob.iglob(\"./tmp/*.py\"): print(fname)","categories":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/python/"},{"name":"文件处理","slug":"文件处理","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"}]},{"title":"python statistics模块","slug":"python数学统计","date":"2020-07-28T06:11:27.486Z","updated":"2020-07-28T06:12:12.085Z","comments":true,"path":"2020/07/28/python数学统计/","link":"","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/2020/07/28/python%E6%95%B0%E5%AD%A6%E7%BB%9F%E8%AE%A1/","excerpt":"","text":"统计模块statistics statistics.mean(data) ：平均值，可输入列表，含小数的decimal statistics.harmonic_mean(data): 调和平均数(倒数平均数) statistics.median(data)： 中值 median([1, 3, 5, 7]) =&gt; 4 statistics.median_low(data)：小中值 median_low([1, 3, 5, 7]) =&gt; 3 statistics.median_high(data)：大中值 median_low([1, 3, 5, 7]) =&gt; 5 statistics.median_grouped(data, interval=1)：用组距式来求中位数 statistics.mode(data): 众数 statistics.pstdev(data, mu=None): 总体标准差 statistics.pvariance(data, mu=None): 总体方差 statistics.stdev(data, xbar=None): 样本标准差 statistics.variance(data, xbar=None): 样本方差 总体方差的分母却是n。样本方差的分母是n-1。","categories":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/python/"}]},{"title":"javascript原型链","slug":"js原型链","date":"2020-07-28T06:06:51.928Z","updated":"2020-07-28T10:04:19.310Z","comments":true,"path":"2020/07/28/js原型链/","link":"","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/2020/07/28/js%E5%8E%9F%E5%9E%8B%E9%93%BE/","excerpt":"","text":"javascript原型原型链：每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。概念： prototype:每一个函数都有这个属性，指向函数的原型对象； __proto__:每一个 new 出来的对象都有这个属性，指向这个对象的原型(prototype )； constructor:每一个原型都有一个constructor属性，指向关联的构造函数 关键：原型对象也是一个对象，也有自己的\\proto__属性，所以就形成了继承链。相关： 在 JavaScript 中，构造器其实就是一个普通的函数。当使用 new 操作符 来作用这个函数时，它就可以被称为构造方法（构造函数）。 ECMAScript 5 中引入了一个新方法：Object.create()。可以调用这个方法来创建一个新对象。新对象的原型就是调用 create 方法时传入的第一个参数： 123456var a = &#123;a: 1&#125;; // a ---&gt; Object.prototype ---&gt; null var b = Object.create(a);// b ---&gt; a ---&gt; Object.prototype ---&gt; nullconsole.log(b.a); //b的原型对象就是a javascript是没有真正意义上的类的，所谓的类就是基于原型链和继承来实现的，即使ES6中加入了class,extends关键字实现类和继承，但实际上还是基于原型链和继承， ES6 类（class）是 JavaScript 现有的原型继承的语法糖。 实际上在定义一个对象的时候原型链本身就已经生成了，javascript处处皆对象的思想放在这里理解起来就很容易了，看完后你会发现万物始于Object.prototype。 ECMAScript6 引入了一套新的关键字用来实现 class。使用基于类语言的开发人员会对这些结构感到熟悉，但它们是不一样的。 JavaScript 仍然是基于原型的。这些新的关键字包括 class, constructor, static, extends, 和 super. 语法糖就相当于汉语里的成语。即，用更简练的言语表达较复杂的含义。在得到广泛接受的情况之下，可以提升交流的效率。","categories":[{"name":"javacript","slug":"javacript","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/javacript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/JavaScript/"}]},{"title":"jQuery的引入","slug":"jQuery","date":"2020-07-28T06:01:33.445Z","updated":"2020-07-28T06:04:04.835Z","comments":true,"path":"2020/07/28/jQuery/","link":"","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/2020/07/28/jQuery/","excerpt":"","text":"jQuery 引入jQuery1234路径引入&lt;script src='文件路径'&gt;&lt;/script&gt;引入在线资源&lt;script src = \"https://code.jquery.com/jquery-1.12.4.js\"&gt;&lt;/script&gt; 入口函数123456$(document).ready(function()&#123; //类似于原生js的window.onload&#125;);//简写$(function()&#123; &#125;); 实例 12345678$(\"td\").hover( function () &#123; $(this).addClass(\"hover\"); &#125;, function () &#123; $(this).removeClass(\"hover\"); &#125;);","categories":[{"name":"javacript","slug":"javacript","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/javacript/"},{"name":"jQuery","slug":"javacript/jQuery","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/javacript/jQuery/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/jQuery/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-07-28T03:14:27.745Z","updated":"2020-07-28T06:05:23.919Z","comments":true,"path":"2020/07/28/hello-world/","link":"","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/2020/07/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/hexo/"},{"name":"node","slug":"node","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/node/"}],"tags":[{"name":"node","slug":"node","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/node/"},{"name":"hexo","slug":"hexo","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/hexo/"}]}],"categories":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/python/"},{"name":"javacript","slug":"javacript","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/javacript/"},{"name":"jQuery","slug":"javacript/jQuery","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/javacript/jQuery/"},{"name":"hexo","slug":"hexo","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/hexo/"},{"name":"node","slug":"node","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/categories/node/"}],"tags":[{"name":"python","slug":"python","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/python/"},{"name":"办公自动化","slug":"办公自动化","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"文件处理","slug":"文件处理","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/jQuery/"},{"name":"node","slug":"node","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/node/"},{"name":"hexo","slug":"hexo","permalink":"https://github.com/Gyz-polymer/Gyz-polymer.github.io/tags/hexo/"}]}